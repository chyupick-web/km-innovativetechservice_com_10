(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{111:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),o=(n(0),n(119)),i={id:"starter-js",title:"Starter JS",sidebar_label:"Starter JS"},l={id:"starter-js",title:"Starter JS",description:"A typical JS starter will have a number of files. In this article we'll explain what they are and why they're important.",source:"@site/docs/starter-js.md",permalink:"/docs/starter-js",editUrl:"https://github.com/coderoad/coderoad-vscode/edit/master/docs/docs/starter-js.md",sidebar_label:"Starter JS",sidebar:"someSidebar",previous:{title:"Initial Commit",permalink:"/docs/init-commit"},next:{title:"Test Examples",permalink:"/docs/test-examples"}},s=[{value:"Avoiding Merge Conflicts",id:"avoiding-merge-conflicts",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A typical JS starter will have a number of files. In this article we'll explain what they are and why they're important."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"- .vscode\n    - extensions.json\n    - launch.json\n    - settings.json\n- .coderoad\n    - test\n    - package.json\n    - .gitignore\n- src\n    - index.js\n- .eslintrc.yml\n- .gitignore\n- package.json\n- README.md\n")),Object(o.b)("h3",{id:"avoiding-merge-conflicts"},"Avoiding Merge Conflicts"),Object(o.b)("p",null,"Since CodeRoad is built on Git, it's important that we try to avoid merge conflicts. This can be managed in a number of ways:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"git ignoring files"),Object(o.b)("li",{parentName:"ul"},"linting & formatting on save")),Object(o.b)("h4",{id:"git-ignoring-files"},"Git Ignoring Files"),Object(o.b)("p",null,"First of all, we can ",Object(o.b)("strong",{parentName:"p"},"ignore meta files")," that produce common merge conflicts like ",Object(o.b)("inlineCode",{parentName:"p"},"package-lock.json")," or ",Object(o.b)("inlineCode",{parentName:"p"},"yarn.lock"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},".gitignore")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"node_modules\npackage-lock.json\nyarn.lock\n")),Object(o.b)("h4",{id:"linting--formatting-on-save"},"Linting & Formatting on Save"),Object(o.b)("p",null,"Merge conflicts can be significantly reduces by ensuring consistent & automatic code linting & formatting through tools such as ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://eslint.org/"}),"ESLint")," or ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://prettier.io/"}),"Prettier"),"."),Object(o.b)("p",null,"While VSCode has its own code formatting defaults, these aren't as strong as the ones provided by ESLint. You can recommend the use of a popular linting extension from the start. Adding files to the ",Object(o.b)("inlineCode",{parentName:"p"},".vscode/extensions.json")," file will prompt the user to install the extension on startup."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},".vscode/extensions.json")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n  // See http://go.microsoft.com/fwlink/?LinkId=827846\n  // for documentation on extensions.json\n  "recommendations": ["dbaeumer.vscode-eslint"]\n}\n')),Object(o.b)("p",null,"The vscode project can be set to run linting and formatting on save."),Object(o.b)("p",null,"See an example below of using Eslint as a linter and formatter for ",Object(o.b)("inlineCode",{parentName:"p"},".js")," files:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},".vscode/settings.json")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n  // See https://code.visualstudio.com/docs/getstarted/settings\n  // for documentation on settings.json\n\n  // lint on save\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  },\n  "eslint.validate": ["javascript"],\n  // options include ["javascriptreact", "typescript", "typescriptreact", "vue", "html"]\n\n  // format on save\n  "editor.defaultFormatter": "dbaeumer.vscode-eslint",\n  "eslint.format.enable": true,\n  "editor.formatOnSave": false, // use eslint formatter\n\n  // display eslint "problems"\n  "eslint.alwaysShowStatus": true\n}\n')),Object(o.b)("p",null,"Ensure that you avoid eslint best practices that are helpful for production environments but less helpful when learning. These include:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"no console logs"),Object(o.b)("li",{parentName:"ul"},"no debugger statements"),Object(o.b)("li",{parentName:"ul"},"no unused variables")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},".eslintrc.yml")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"env:\n  es6: true\n  node: true\nextends:\n  - airbnb-base\nglobals:\n  Atomics: readonly\n  SharedArrayBuffer: readonly\nparserOptions:\n  ecmaVersion: 2018\n  sourceType: module\nrules:\n  # see available rules: https://eslint.org/docs/rules/\n  no-console: off\n  no-debugger: off\n  no-unused-vars: off\n")))}p.isMDXComponent=!0},119:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?a.a.createElement(m,l({ref:t},c,{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);